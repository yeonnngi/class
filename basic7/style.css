@charset "UTF-8"; /* 한글이 깨지는 것을 방지 */

*{margin: 0; padding: 0;}

/* reset */
/* 폰트크기의 기본값은 16px */
h1,h2,h3,h4,h5,h6{
    font-size: 16px; /* 사이즈가 각각 다른 글자를 통일한 후 작업에 맞게 사이즈 개별 설정해주기 */
    font-weight: normal; /* 폰트 두께 */
}

a{text-decoration: none; /* 글자의 밑줄 */
    color: #223344; /* 글자색상 #234*/
} /* a태그는 마우스가 호버될때 글자가 붉게 바뀌는 기능들을 모두 삭제해준다 아무 효과 없도록 + 같은 숫자의 연속은 줄여서 표현가능 223344 = 234 but, 113345는 줄일 수 없음*/

.약::after{
    content: ""; /* <-::after와 꼭 같이 쓰여야함 */
    clear: both; /* <-얘가 약 */
    display: block; /* 약효는 공간을 인식하는 블록요소에만 들 수 있어서 인라인요소인 ::after를 블록요소로 바꿔주는 것 */

    /* 가상의 요소는 할 수 있는게 적다 이미 있는것과 가상으로 있는 것은 다르다는 것 after/before는 ::을 하나만 적어도 되고 두개를 적어도 상관 없다 워낙 오래전부터 있던 요소로 어떻게든 먹히는 코드*/
}

.전체{
    background-color: #FBFACD;
    width: 1000px;
    margin: 30px auto 0; /* 상 30 좌우 auto 하 0 */
    padding: 20px;
    box-sizing: border-box; /* 박스 사이즈에 선까지 포함해라 */
}
.전체>div + div{
    margin-top: 30px;
    /* div + div 뒤의 div의 입장에서는 앞이 형
    형이 있는 div를 부른 것(내 위의 형이 있는 상황의 애들만 해당) 첫째는 형이 없으니 해당안됨 둘째셋째만 해당 */
}
.전체 .첫째{
    background-color: #E8C4C4;
    padding: 20px;
}

.전체 .첫째:hover{ /* hover도 가상이지만 니가 만약 마우스를 올린다면의 존재하는 것에 대한 가상요소이므로(첫째는 존재하는 요소로 가상요소가 아님) 원래 있는 영역인데 너가 만약 마우스를 올린다면의 뜻임 :하나만 사용 가능*/
    color: green;
}    

.전체 .첫째 .첫자{
    background-color: #CFFDE1;
    width: 49%; /* 부모 높이의 50%를 따라와라 margin을 2% 주게되면 49 2 49으로 50에서 수정 필요*/
    height: 200px; /* 부모의 패딩 공간을 제외한 부모의 높이를 따라감 */
    float: left;  /* 해당 블록은 자기의 영역이라 생각해서 자기 혼자만 위치하려는 습성이 있어 공간을 같이 사용하게 하기 위한 명령어 <- but, 이렇게 하면 부모가 깨지게되므로 부모를 위한 약효를 위에 ::after를 사용하여 작성해준 후 부모에게 약 처방 해주기*/
}

.전체 .첫째 .첫자.첫째자식1{
    margin-right: 2%;
}
/* .첫자.첫째자식
첫자이면서 첫째자식이니까 둘 사이는 띄어쓰면 안됨 */
.전체 .첫째 .첫자.첫째자식2{}


.전체 .둘째{background-color: #FED049;}

.전체 .둘째 .앵커{
    background-color: blue;
}

.전체 .둘째 p{
    width: 150px;
    margin-top: 20px;
}
.전체 .둘째 p a{}
.전체 .둘째 p a img{width: 100%;}
/* 인라인요소는 공간을 인식하지 못함
그래서 넓이, 높이값을 주어도 적용되지 않음
but 예외가 있는데 img, button 테그는 인라인요소이지만 넓이와 높이가 적용됩니다

a는 인라인요소라 영역을 인지하지 못해 img가 넓이를 따라가지 못해서 img는 p의 넓이를 따라감. 부모는 자식의 넓이를 따라가니 a는 img의 넓이를 따라가게됨

인라인요소 안에는 인라인요소만 들어간다
(인라인요소 안에 블록요소는 들어가지 않음)
블록요소 안에는 인라인요소, 불록요소 모두 들어감

html상에서의 사용규칙
span p (x) p는 블록요소, 인라인요소 안에 블록요소가 있어도 에러는 안나지만 영역을 잡을때 문제가 발생할 수 있음
특별하게 합리적 이유가 필요할때는 이렇게 사용해도 무방하나 그렇지 않을 경우에는 사용X
p span (o) span은 인라인요소
span img (o)

닫는 태그가 없는 애들은 단일태그로 자식을 못품는 아이들 img와 같은 여러 종류가 있다
*/

.전체 .세째{background-color: #BA94D1;}